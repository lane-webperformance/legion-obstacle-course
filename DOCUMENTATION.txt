GET /

Prints this documentation.

###

GET /delay?response={integer}&content={integer}

Responds while introducing the specified artificial delays. Used to simulate slow response times.

response - How long (in milliseconds) to delay before writing the response headers. Optional. Default is 0.
content - How long (in milliseconds) to delay before writing the content. This happens in the middle of the content, that is, some content is written immediately before and after the delay. Optional. Default is 0.

###

GET /inventory
POST /inventory
DELETE /inventory

Prints the current inventory. Unless you've manipulated inventory using a POST,PUT, or PATCH to /inventory, this will be an empty JSON object.
The inventory is a flat JSON object mapping keys to numerical values. Any attempt to use any non-numerical value will result in a 400 error.
By POSTing JSON content, update the inventory by adding the numerical values of the new keys to the values already in storage.
By PUTing JSON content, update the inventory by replacing the entire inventory with the new JSON object.
By PATCHing JSON content, update the inventory by setting each key in the new JSON object (but leaving the remainder intact).
By DELETEing, remove all inventory items.

###

POST /ticket/new
POST /ticket/redeem?ticket={integer}

Get a random ID number (called a ticket) and later redeem it by submitting the same ticket.
Each ticket can only be redeemed once.
Each call yields a JSON response with a "status" field with possible values "success" or "failure".
If there is a failure, there will be a "reason" field with a human-readable explanation.
When a new ticket is created, there will be a "ticket" field with the randomly selected ID of the ticket.


###


